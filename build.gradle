buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.2'
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.unbroken-dome.test-sets'

group = 'com.dbs.defcon'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {

// Dependencies for Swagger...
//	compile 'io.springfox:springfox-swagger2:2.9.2'
//	compile 'io.springfox:springfox-swagger-ui:2.9.2'
// End of dependencies for Swagger
	
    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.9.4'
	
	compileOnly("org.projectlombok:lombok:1.18.4")
	// https://mvnrepository.com/artifact/junit/junit
	testCompile group: 'junit', name: 'junit', version: '4.12'
		
	// Include JUnit test engine
//	testCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
//	testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
//	testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.3.2'
	
	
//	implementation('org.springframework.boot:spring-boot-starter-actuator')
//	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
//	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-web')
//	runtimeOnly('org.springframework.boot:spring-boot-devtools')
//	runtimeOnly('com.h2database:h2')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testCompile(group: 'io.projectreactor', name: 'reactor-core', version: '3.2.3.RELEASE')
	
//	testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
//	testImplementation('org.springframework.security:spring-security-test')
	
	// Test dependencies (Spock)
	testCompile 'org.spockframework:spock-core:1.2-groovy-2.5'
	testCompile 'com.athaydes:spock-reports:1.6.1'
//	testRuntime 'org.objenesis:objenesis:2.5.1'
//	testRuntime 'net.bytebuddy:byte-buddy:1.6.5'
//	testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
	
	// if you don't already have slf4j-api and an implementation of it in the classpath, add this!
//	testCompile 'org.slf4j:slf4j-api:1.7.25'
//	testCompile 'org.slf4j:slf4j-simple:1.7.25'

}


test {
	enabled = true

	maxHeapSize = "1g"
	jvmArgs '-XX:MaxMetaspaceSize=128m'
	testLogging {
		exceptionFormat = 'full'
	}
}


// Might be able to move this into functionalTest
tasks.withType(GroovyCompile) {
	groovyOptions.forkOptions.memoryMaximumSize = '256m'
}


// This lets us store different types of tests in different directories
testSets {
	integrationTest
	functionalTest
}


functionalTest {
	systemProperty "geb.env", 'chrome'
}


// Unit tests should be run every time we build.
build.dependsOn test


tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")

	systemProperty "env", System.getProperty("env") // Useful for passing environment variables to the app
}
